plugins {
    java
}

sourceSets {
    main {
        java.srcDirs("src/main/java")
    }
    test {
        java.srcDirs("src/test/java")
    }
}

/*
Setup environment variables
* stsInstallLocation should point to the Steam install directory
* compileOnlyLibs should point to a directory containing any JARs you reference
    - e.g. this directory should have desktop-1.0.jar, ModTheSpire.jar, BaseMod.jar
    - NOTE: these compileOnlyLibs are not included in the JAR, so you will get runtime
      errors if you try and call code that won't exist on the client.
 */
var steamappsLocation: String = ""
var stsInstallLocation: String = ""

var workshopLocation: String = "$steamappsLocation/workshop/content/646570"

var modTheSpireLocation: String = "$workshopLocation/1605060445/ModTheSpire.jar"
var baseModLocation: String = "$workshopLocation/1605833019/BaseMod.jar"
var stsJar: String = "$stsInstallLocation/desktop-1.0.jar"


// Uses the value written in settings.gradle
var modName: String = rootProject.name

repositories {
    mavenCentral()
}

dependencies {
    compileOnly(files(modTheSpireLocation, baseModLocation, stsJar))
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0") // Update the version if necessary
    testImplementation(files(modTheSpireLocation, baseModLocation, stsJar))
    // LibGDX core
    testImplementation("com.badlogicgames.gdx:gdx:1.12.0")
    // LibGDX headless backend
    testImplementation("com.badlogicgames.gdx:gdx-backend-headless:1.12.0")
    // LibGDX natives (for headless backend)
    testImplementation("com.badlogicgames.gdx:gdx-platform:1.12.0:natives-desktop")
    
    testImplementation("org.mockito:mockito-core:5.5.0")
}


tasks.register("srcsets") {
    doLast {
        sourceSets.forEach { srcSet ->
            println(srcSet.name)
            println(srcSet.allJava.srcDirs)
        }
    }
}

// --------------------------------------------------------------------------------

tasks.register<Jar>("buildJAR") {
    group = "Slay the Spire"
    description = "Builds a fat (includes runtime dependencies) JAR in the build/libs folder"

    // Main code
    from(sourceSets.main.get().output)

    // Any runtime dependencies (e.g. from mavenCentral(), local JARs, etc.)
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().filter {
            it.name.endsWith("jar")
        }.map {
            zipTree(it)
        }
    })
}

tasks.register<Copy>("buildAndCopyJAR") {
    group = "Slay the Spire"
    description = "Copies the JAR from your build/libs folder into your \$STS_INSTALL location"

    dependsOn("buildJAR")

    from("build/libs/$modName.jar")
    into("$stsInstallLocation/mods")
}

tasks.withType<Test> {
    useJUnitPlatform()
    testLogging {
      events("passed", "skipped", "failed")
      exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
      showExceptions = true
      showCauses = true
      showStackTraces = true
      showStandardStreams = true
    }
}

tasks.register("checkDependencyFiles") {
    doLast {
        val files = listOf(modTheSpireLocation, baseModLocation, stsJar)
        files.forEach { path ->
            val file = File(path)
            if (file.exists()) {
                println("Found: $path")
            } else {
                println("Not found: $path")
            }
        }
    }
}
